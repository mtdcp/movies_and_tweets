[{"C:\\Users\\Utilizador\\Desktop\\movies_and_tweets\\src\\index.js":"1","C:\\Users\\Utilizador\\Desktop\\movies_and_tweets\\src\\App.js":"2","C:\\Users\\Utilizador\\Desktop\\movies_and_tweets\\src\\reportWebVitals.js":"3","C:\\Users\\Utilizador\\Desktop\\movies_and_tweets\\src\\components\\Movies.js":"4","C:\\Users\\Utilizador\\Desktop\\movies_and_tweets\\src\\components\\InitialPage.js":"5","C:\\Users\\Utilizador\\Desktop\\movies_and_tweets\\src\\components\\Tweets.js":"6"},{"size":500,"mtime":1612727923111,"results":"7","hashOfConfig":"8"},{"size":611,"mtime":1612880816316,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":5413,"mtime":1612893183334,"results":"11","hashOfConfig":"8"},{"size":637,"mtime":1612888921094,"results":"12","hashOfConfig":"8"},{"size":6229,"mtime":1612898173005,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"zigfad",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"C:\\Users\\Utilizador\\Desktop\\movies_and_tweets\\src\\index.js",[],["29","30"],"C:\\Users\\Utilizador\\Desktop\\movies_and_tweets\\src\\App.js",[],"C:\\Users\\Utilizador\\Desktop\\movies_and_tweets\\src\\reportWebVitals.js",[],"C:\\Users\\Utilizador\\Desktop\\movies_and_tweets\\src\\components\\Movies.js",[],["31","32"],"C:\\Users\\Utilizador\\Desktop\\movies_and_tweets\\src\\components\\InitialPage.js",[],"C:\\Users\\Utilizador\\Desktop\\movies_and_tweets\\src\\components\\Tweets.js",["33"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Button from '@material-ui/core/Button';\r\nimport sentiment from 'sentiment-ptbr';\r\n\r\nexport default class Tweets extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tweets: [],\r\n            tweetsAux: [],\r\n            tweetsArr: [],\r\n            sentimentos: [],\r\n            sentimentosAux: []\r\n        };\r\n        this.getTweets = this.getTweets.bind(this);\r\n        this.getTweetSentiment = this.getTweetSentiment.bind(this);\r\n        this.goBack = this.goBack.bind(this);\r\n    }\r\n\r\n    //1-if exists tweets data in session storage, it will get that data and fill the 'tweetsArr' array\r\n    //2-if exists sentimentos data in session storage, it will get that data and fill the 'sentimentosAux' array\r\n    componentWillMount() {\r\n        let tweetsStorage = JSON.parse(sessionStorage.getItem('tweets'));\r\n        let sentimentosStorage = JSON.parse(sessionStorage.getItem('sentimentos'));\r\n        let tweets = this.state.tweetsArr;\r\n        let sentimentos = this.state.sentimentosAux;\r\n\r\n        if(tweetsStorage) {\r\n            tweetsStorage.forEach(tweet => {\r\n                tweets.push(tweet);\r\n            });  \r\n        }\r\n        if(sentimentosStorage) {\r\n            sentimentosStorage.forEach(sentimento => {\r\n                sentimentos.push(sentimento);\r\n            });  \r\n        }\r\n    }\r\n\r\n    //1- if 'tweetsArr' or 'sentimentos' has data, it cleans the array - to garantee that the table that shows the data is cleaner and user-friendly\r\n    //2- before the twitter's API url, a new link was added - to garantee there is no CORS issues\r\n    //3- in the request header, the authorization bearer token is send to allow access to the API\r\n    //4- get the data from twitter's API, given the choosed theme 'Portugal'\r\n    //5- save the data in 'tweetsArr' array\r\n    //6- at the end of the function, call the getTweetSentiment() function to evaluate the sentiment for each tweet\r\n    async getTweets() {\r\n        while (this.state.tweetsArr.length) {\r\n            this.state.tweetsArr.pop();\r\n            this.state.sentimentos.pop();\r\n        }\r\n        try {\r\n            await axios.get('https://cors-anywhere.herokuapp.com/https://api.twitter.com/2/tweets/search/recent?query=Portugal', {\r\n                headers: {\r\n                    'Authorization': 'Bearer AAAAAAAAAAAAAAAAAAAAAGgKMgEAAAAA0zAl7NpQTaBwChxf9ncpvdrKf1E%3DWkmqH06UgoLUPJSfiaKjMi3XEia7GqBC5rPmk915b4AWIhMB1N',\r\n                    \"Content-Type\": \"application/json\",\r\n                    'Access-Control-Allow-Origin': '*',\r\n                  }\r\n            }).then(data => {   \r\n                data.data.data.forEach(tweet => {\r\n                    if(!this.state.tweetsAux.includes(tweet)) {\r\n                        this.state.tweetsAux.push(tweet);\r\n                    }\r\n                    this.setState({ tweetsArr: this.state.tweetsAux })\r\n                });\r\n            }).catch(erro=> {\r\n                console.log('Erro ao obter os tweets: ' + erro);\r\n            });\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n        this.getTweetSentiment();\r\n    }\r\n\r\n    //1-for each movie in 'tweets' array, it will evaluate the sentiment of the tweet from -1 to 1\r\n    //2-depending on the sentiment (<0, =0, >0), it will add a string (\"Neutro\", \"Positivo\", \"Negativo\") to 'sentimentos' array\r\n    //3-it will change the value of sentimentosAux to 'sentimentos' array\r\n    getTweetSentiment() {\r\n        let tweets = this.state.tweetsArr;\r\n        let sentimentos = this.state.sentimentos;\r\n        tweets.forEach(tweet=> {\r\n            let score = sentiment(tweet.text).comparative;\r\n            if(score === 0) {\r\n                sentimentos.push({text: \"Neutro\"});\r\n            } else if(score < 0) {\r\n                sentimentos.push({text: \"Negativo\"});\r\n            } else if(score > 0) {\r\n                sentimentos.push({text: \"Positivo\"});\r\n\r\n            }\r\n            this.setState({ sentimentosAux: this.state.sentimentos })\r\n        });\r\n    }\r\n    \r\n    //return to the initial page\r\n    goBack() {\r\n        return window.location.replace(\"/\");\r\n    }\r\n\r\n     //will render all the data inside return statement and show it in the page\r\n    render() {\r\n        let tweets = this.state.tweetsArr;\r\n        let sentimentos = this.state.sentimentosAux;\r\n        return (\r\n            <div>\r\n                <h1 className=\"title_tweets\">AnÃ¡lise de sentimento de Tweets sobre Portugal</h1>\r\n                <Button id=\"backTweets\" title=\"Voltar Ã  pÃ¡gina inicial\" onClick={this.goBack}>\r\n                      Back\r\n                </Button> \r\n                <Button id=\"getTweets\" title=\"Clica quantas vezes quiseres para obteres tweets\" onClick={this.getTweets}>\r\n                    Obter Tweets ðŸ‡µðŸ‡¹\r\n                </Button> \r\n                <table className=\"tableLayout\" id=\"tableIdTweets\">\r\n                        <thead className=\"cell\">\r\n                            <tr>\r\n                                <th>Tweet</th>\r\n                                <th>Sentimento</th>\r\n                            </tr>\r\n                                {tweets.map((tweet, index) => {\r\n                                    sessionStorage.setItem('tweets', JSON.stringify(tweets));\r\n                                    sessionStorage.setItem('sentimentos', JSON.stringify(sentimentos));\r\n                                    return sentimentos.map((sentimento, indice) => {\r\n                                        if(index === indice) {\r\n                                            return(\r\n                                                <tr key={index}>\r\n                                                    <td> {tweet.text} </td>  \r\n                                                    <td> {sentimento.text} </td>  \r\n                                                </tr>\r\n                                        )\r\n                                        }})     \r\n                                }) }        \r\n                        </thead>\r\n                    </table>  \r\n                <br></br><br></br>\r\n            </div>\r\n        )\r\n    }\r\n}",{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"34","replacedBy":"38"},{"ruleId":"36","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":123,"column":81,"nodeType":"42","messageId":"43","endLine":123,"endColumn":83},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],["44"],["45"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]